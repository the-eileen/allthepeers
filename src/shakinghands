vector<int> socketList;

for(std::vector<PeerInfo>::iterator it = peerList.begin(); it != peerList.end() ; it++){
  int sockfd = socket(AF_INET, SOCK_STREAM, 0);
  socketList.push_back(sockfd);
  struct sockaddr_in addr;
  addr.sin_family = AF_INET;
  addr.sin_port = htons(it->port);     // short, network byte order
  addr.sin_addr.s_addr = inet_addr(it->ip);
  memset(addr.sin_zero, '\0', sizeof(addr.sin_zero));
  if (connect(sockfd, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {
    perror("connect");
    //return 2;
    }


  HandShake hshake = HandShake(metainfo->getHash(), metainfo->m_peerid);
  char* buf = (char*)hshake.encode()->buf();
  if(send(sockfd, buf, 68, 0) == -1)
    perror("send");
  if (recv(sockfd, rshake, sizeof(rshake), 0) == -1) 
    perror("recv");
  ConstBufferPtr peerShake = std::make_shared<Buffer>(rshake, 68);
}
